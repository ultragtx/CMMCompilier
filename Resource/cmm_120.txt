[nonterminal]
	program primary_expression postfix_expression multiplicative_expression additive_expression
	relational_expression equality_expression assignment_expression 
	expression declaration init_declarator_list
	init_declarator type_specifier direct_declarator initializer initializer_list statement
	compound_statement block_item_list block_item expression_statement selection_statement
	iteration_statement jump_statement printf_statement printf_params scanf_statement scanf_params
[terminal]
	main ( ) identifier constant string_literal [ ] ++ -- * / + - < > <= >= == != = ,
	semi int float { } if else for return printf scanf &
[start]
	program'
[production]

// Main
	program' => program ;
	program => type_specifier main ( ) compound_statement ;

// Expressions

	primary_expression =>
			identifier |
			constant |
			string_literal |
			( expression ) ;
		
	postfix_expression =>
			primary_expression |
			postfix_expression [ expression ] |
			postfix_expression ++ |
			postfix_expression -- ;
		
	multiplicative_expression =>
			postfix_expression |
			multiplicative_expression * postfix_expression |
			multiplicative_expression / postfix_expression ;
		
	additive_expression =>
			multiplicative_expression |
			additive_expression + multiplicative_expression |
			additive_expression - multiplicative_expression ;
		
	relational_expression =>
			additive_expression |
			relational_expression < additive_expression |
			relational_expression > additive_expression |
			relational_expression <= additive_expression |
			relational_expression >= additive_expression ;
		
	equality_expression =>
			relational_expression |
			equality_expression == relational_expression |
			equality_expression != relational_expression ;
		
	assignment_expression =>
			equality_expression |
			postfix_expression = assignment_expression ;
		
	expression =>
			assignment_expression |
			expression , assignment_expression ;
		
// Declarations

	declaration =>
			type_specifier init_declarator_list semi ;	// here is a semi
		
	init_declarator_list =>
			init_declarator |
			init_declarator_list , init_declarator ;
		
	init_declarator =>
			direct_declarator |
			direct_declarator = initializer ;
		
	type_specifier =>
			int |
			float ;
		
	direct_declarator =>
			identifier |
			direct_declarator [ assignment_expression ] ;
		
	initializer =>
			assignment_expression |
			{ initializer_list } ;
		
	initializer_list =>
			initializer_list , initializer ;	// initializer may change to assignment_expression
		
// Statements

	statement =>
			compound_statement |
			expression_statement |
			selection_statement |
			iteration_statement |
			jump_statement |
			printf_statement |
			scanf_statement ;
		
	compound_statement =>
			{ block_item_list } ;
		
	block_item_list =>
			block_item |
			block_item_list block_item ;
		
	block_item =>
			declaration |
			statement ;
		
	expression_statement =>
			expression semi ;		// here is a semi
		
	selection_statement =>
			//if ( expression ) statement |
			if ( expression ) statement else statement ;
		
	iteration_statement =>
			for ( expression semi expression semi expression ) statement ; // here are 2 semi
			
	jump_statement =>
			return expression semi ;	// here is a semi
			
// Printf/Scanf

	printf_statement =>
			printf ( printf_params ) ;
			
	printf_params =>
			string_literal |
			printf_params , identifier ;
		
	scanf_statement =>
			scanf ( scanf_params ) ;
	
	scanf_params =>
			string_literal |
			scanf_params , & identifier ;