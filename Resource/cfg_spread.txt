"program' => program ;",
"program => type_specifier main ( ) compound_statement ;",
"primary_expression => identifier ;",
"primary_expression => constant ;",
"primary_expression => string_literal ;",
"primary_expression => ( expression ) ;",
"postfix_expression => primary_expression ;",
"postfix_expression => postfix_expression [ expression ] ;",
"postfix_expression => postfix_expression ++ ;",
"postfix_expression => postfix_expression -- ;",
"",
"multiplicative_expression => postfix_expression ;",
"multiplicative_expression => multiplicative_expression * postfix_expression ;",
"multiplicative_expression => multiplicative_expression / postfix_expression ;",
"additive_expression => multiplicative_expression ;",
"additive_expression => additive_expression + multiplicative_expression ;",
"additive_expression => additive_expression - multiplicative_expression ;",
"relational_expression => additive_expression ;",
"relational_expression => relational_expression < additive_expression ;",
"relational_expression => relational_expression > additive_expression ;",
"relational_expression => relational_expression <= additive_expression ;",
"relational_expression => relational_expression >= additive_expression ;",
"equality_expression => relational_expression ;",
"equality_expression => equality_expression == relational_expression ;",
"equality_expression => equality_expression != relational_expression ;",
"assignment_expression => equality_expression ;",
"assignment_expression => postfix_expression assignment_operator assignment_expression ;",
"assignment_operator =>	= ;",
"expression => assignment_expression ;",
"expression => expression , assignment_expression ;",
"constant_expression => equality_expression ;",
"declaration => declaration_specifiers init_declarator_list semi ;	// here is a semi",
"declaration_specifiers => type_specifier ;",
"init_declarator_list =>	 init_declarator ;",
"init_declarator_list =>	 init_declarator_list , init_declarator ;",
"init_declarator => declarator ;",
"init_declarator => declarator = initializer ;",
"type_specifier => int ;",
"type_specifier => float ;",
"declarator => direct_declarator ;",
"direct_declarator => identifier ;",
"direct_declarator => direct_declarator [ assignment_expression ] ;",
"initializer => assignment_expression ;",
"initializer => { initializer_list } ;",
"initializer_list =>	initializer ;",
"initializer_list =>	initializer_list , initializer ;	// initializer may change to assignment_expression",
"statement => compound_statement ;",
"statement => expression_statement ;",
"statement => selection_statement ;",
"statement => iteration_statement ;",
"statement => jump_statement ;",
"compound_statement => { block_item_list } ;",
"block_item_list => block_item ;",
"block_item_list => block_item_list block_item ;",
"block_item => declaration ;",
"block_item => statement ;",
"expression_statement => printf_statement semi ;",
"expression_statement => scanf_statement semi ;",
"expression_statement => expression semi ;		// here is a semi",
"selection_statement => //if ( expression ) statement ;",
"selection_statement => if ( expression ) statement else statement ;",
"iteration_statement => for ( expression semi expression semi expression ) statement ; // here are 2 semi",
"jump_statement => return expression semi ;	// here is a semi",
"printf_statement => printf ( printf_params ) ;",
"printf_params => string_literal ;",
"printf_params => printf_params , identifier ;",
"scanf_statement => scanf ( scanf_params ) ;",
"scanf_params => string_literal ;",
"scanf_params =>	scanf_params , & identifier ;",